#!/usr/bin/env python

import io
import os
import sys
from contextlib import redirect_stdout
from dataclasses import fields, is_dataclass
from pathlib import Path

# Read TBP path from environment variable
tbp_path_env = os.environ.get("PROJECT_ROOT")
if not tbp_path_env:
    print("Error: PROJECT_ROOT environment variable is not set.", file=sys.stderr)
    sys.exit(1)

tbp_path = Path(tbp_path_env)
if not tbp_path.exists():
    print(f"Error: TBP path does not exist: {tbp_path}", file=sys.stderr)
    sys.exit(1)

# Add TBP path for import
sys.path.insert(0, str(tbp_path))

# Suppress all stdout during import
with redirect_stdout(io.StringIO()):
    try:
        import benchmarks.configs.names as names_module
    except ImportError as e:
        print(f"Import failed: {e}", file=sys.stderr)
        sys.exit(1)

# Detect all top-level dataclass types in names_module
for name, obj in vars(names_module).items():
    if isinstance(obj, type) and is_dataclass(obj):
        for field in fields(obj):
            print(f"{field.name}:{obj.__name__}")
