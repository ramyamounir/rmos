#!/usr/bin/bash

UV_VENV_HOME=${UV_VENV_HOME:-"$XDG_CACHE_HOME/uv/venv"}

require_project_env() {
    if [ -z "$PROJECT_ENV" ]; then
        echo "‚ùå Error: PROJECT_ENV is not set. Please define it before running this command."
        echo "Example: export PROJECT_ENV=myenv"
        exit 1
    fi
}
case "$1" in
    "" | "help" | "-h" | "--help")
        echo ""
        echo "üì¶ uve ‚Äî uv environment and project manager"
        echo ""
        echo "ENVIRONMENT:"
        echo "  \$PROJECT_ENV  Name of the environment to create/manage"
        echo ""
        echo "USAGE:"
        echo "  uve COMMAND [ARGS...]"
        echo ""
        echo "COMMANDS:"
        echo "  init                        Create \$PROJECT_ENV environment, activate it, and init project"
        echo "  ls    | list                List environments under \$UV_VENV_HOME (marks \$PROJECT_ENV)"
        echo "  rmenv                       Remove the environment named \$PROJECT_ENV"
        echo "  add PACKAGE [...]           Add package(s) to the active environment"
        echo "  remove | rm PACKAGE [...]   Remove package(s) from the active environment"
        echo "  sync                        Sync environment with uv.lock"
        echo "  clean                       Remove files created by 'uve init' (.git, pyproject.toml, etc.)"
        echo ""
        echo "EXAMPLES:"
        echo "  export PROJECT_ENV=myenv"
        echo "  uve init"
        echo "  source uve.sh activate"
        echo "  uve add requests rich"
        echo "  uve rm requests"
        echo "  uve sync"
        echo ""
        ;;
    "init")
        require_project_env
        ENV_PATH="$UV_VENV_HOME/$PROJECT_ENV"

        if [ -d "$ENV_PATH" ]; then
            echo "‚ö†Ô∏è Environment '$PROJECT_ENV' already exists at $ENV_PATH"
        else
            echo "üöß Creating virtual environment at $ENV_PATH..."
            uv venv "$ENV_PATH"
        fi

        echo "‚ö° Activating environment '$PROJECT_ENV'..."
        source "$ENV_PATH/bin/activate"

        if [ -f "pyproject.toml" ]; then
            echo "üìÑ Found existing pyproject.toml ‚Äî running 'uve sync' instead of 'uv init'..."
            "$0" sync
        else
            echo "üì¶ Initializing uv project in current directory..."
            uv init
        fi
        ;;
    "ls" | "list")
        if [ -d "$UV_VENV_HOME" ]; then
            echo "üì¶ Available environments in $UV_VENV_HOME:"
            for env in "$UV_VENV_HOME"/*; do
                [ -d "$env" ] || continue
                name=$(basename "$env")
                if [ "$name" = "$PROJECT_ENV" ]; then
                    echo "  üëâ $name (PROJECT_ENV)"
                else
                    echo "     $name"
                fi
            done
        else
            echo "‚ùå No virtual environments found in $UV_VENV_HOME"
        fi
        ;;
    "rmenv")
        require_project_env
        ENV_PATH="$UV_VENV_HOME/$PROJECT_ENV"

        if [ -z "$PROJECT_ENV" ]; then
            echo "‚ùå PROJECT_ENV is not set."
            exit 1
        elif [ ! -d "$ENV_PATH" ]; then
            echo "‚ùå No environment named '$PROJECT_ENV' found at $ENV_PATH"
        else
            echo "‚ö†Ô∏è This will permanently delete the environment '$PROJECT_ENV' at:"
            echo "   $ENV_PATH"
            read -p "Are you sure you want to remove it? [y/N] " confirm_env
            if [[ "$confirm_env" =~ ^[Yy]$ ]]; then
                rm -rf "$ENV_PATH"
                echo "üóëÔ∏è Removed environment '$PROJECT_ENV'."

                read -p "Do you also want to clean up project files (pyproject.toml, .git, etc)? [y/N] " confirm_clean
                if [[ "$confirm_clean" =~ ^[Yy]$ ]]; then
                    echo "üßº Calling 'uve clean'..."
                    "$0" clean
                else
                    echo "‚ú® Skipped project cleanup."
                fi
            else
                echo "‚ùå Aborted environment removal."
            fi
        fi
        ;;
    "add")
        require_project_env

        if [ -z "$VIRTUAL_ENV" ]; then
            echo "‚ùå No virtual environment is currently active."
            echo "Please activate your environment before adding packages:"
            echo "  source uve.sh activate"
            exit 1
        fi

        if [ $# -lt 2 ]; then
            echo "Usage: uve add <package> [package2 ...]"
            exit 1
        fi

        echo "üì¶ Adding packages to environment '$PROJECT_ENV': ${@:2}"
        uv add --active "${@:2}"
        ;;
    "remove" | "rm")
        require_project_env

        if [ -z "$VIRTUAL_ENV" ]; then
            echo "‚ùå No virtual environment is currently active."
            echo "Please activate your environment before removing packages:"
            echo "  source uve.sh activate"
            exit 1
        fi

        if [ $# -lt 2 ]; then
            echo "Usage: uve remove <package> [package2 ...]"
            exit 1
        fi

        echo "üóëÔ∏è Removing packages from environment '$PROJECT_ENV': ${@:2}"
        uv remove --active "${@:2}"
        ;;
    "sync")
        require_project_env

        if [ -z "$VIRTUAL_ENV" ]; then
            echo "‚ùå No virtual environment is currently active."
            echo "Please activate your environment before syncing:"
            echo "  source uve.sh activate"
            exit 1
        fi

        if [ ! -f "uv.lock" ]; then
            echo "‚ö†Ô∏è uv.lock not found in current directory. Did you forget to run 'uv lock'?"
            exit 1
        fi

        echo "üîÑ Syncing environment '$PROJECT_ENV' with uv.lock..."
        uv sync --active
        ;;
    "clean")
        require_project_env

        echo "üßπ Cleaning up project files created by 'uve init'..."

        files_to_remove=(
            ".python-version"
            ".gitignore"
            "pyproject.toml"
            "uv.lock"
            "README.md"
            "main.py"
        )

        for f in "${files_to_remove[@]}"; do
            if [ -e "$f" ]; then
                rm -rf "$f"
                echo "  ‚úîÔ∏è Removed $f"
            fi
        done

        if [ -d ".git" ]; then
            rm -rf .git
            echo "  ‚úîÔ∏è Removed .git directory"
        fi

        echo "‚úÖ Project directory cleaned."
        ;;
esac
