#!/usr/bin/env zsh
set -euo pipefail

# Reuse helpers & paths
source "$HOME/.config/scripts/tbp_common.zsh"

ENV_FILE="$TBP_ENVRC"
repo="$(tbp_repo_key)"

if [[ ! -f "$ENV_FILE" ]]; then
  print -u2 -- "No $ENV_FILE found."
  exit 1
fi

# Get the repo block from envmap.json (maps VAR -> picker_name)
vars_json="$(json_get_repo "$repo" || true)"

typeset -a vars
if [[ -n "$vars_json" ]]; then
  vars=("${(@f)$(python - <<'PY' "$vars_json"
import json,sys
obj=json.loads(sys.argv[1]) if sys.argv[1] else {}
for k in obj.keys():
    print(k)
PY
)}")
else
  vars=()
fi

# Helper: read VAR from .envrc and unquote
_get_envrc_val() {
  local key="$1"
  local line
  line="$(grep -m1 "^export[[:space:]]\+$key=" "$ENV_FILE" || true)"
  [[ -z "$line" ]] && return 1
  local rhs="${line#*=}"
  # zsh unquote/backslash removal
  printf '%s' "${(Q)rhs}"
}

# Pretty table header
printf "\n\033[1;36m%-20s\033[0m %s\n" "Variable" "Value"
printf "%-20s %s\n" "--------------------" "------------------------------"

typeset -i shown=0
for v in "${vars[@]}"; do
  val="$(_get_envrc_val "$v" || true)"
  [[ -z "$val" ]] && continue
  printf "\033[1;33m%-20s\033[0m %s\n" "$v" "$val"
  shown=1
done

[[ "$shown" -eq 1 ]] || printf "(No context variables set for repo '%s')\n" "$repo"
echo
