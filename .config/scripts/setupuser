#!/usr/bin/env bash

# -----------------------------------------------------------------------------
#                               INITIAL TEST
# -----------------------------------------------------------------------------

if [[ $(cat /proc/$$/comm) != "bash" ]]; then
    echo "This is not a bash shell; this script runs exclusively in bash"
    return;
fi

# get distribution name;
# TODO: if needed, this can be automated by reading /etc/os-release
DISTRO=$1; ___() {
    if [ -z $DISTRO ]; then
        echo -e "---Choose your distribution---"
        DISTRIBUTIONS=("arch" "ubuntu" "alpine")

        select DISTRO in "${DISTRIBUTIONS[@]}"; do
          break;
        done
    fi
};___;

# -----------------------------------------------------------------------------
#                                  SETUP
# -----------------------------------------------------------------------------

# installing basic necessities
function preinstal() {
    case $1 in
        "arch")
            pacman -Syyu --noconfirm;
            pacman -S git fontconfig --noconfirm;
            ;;
        "ubuntu")
            apt update -y;
            apt upgrade -y;
            apt install git fontconfig -y;
            ;;
        "alpine")
            apk update;
            apk upgrade;
            apk add git fontconfig;
            ;;
        *)
            echo -e "Unknown distribution"
            ;;
    esac
}

# create the directory structure
function mkuserdirs() {
    mkdir -p $HOME/.local/{bin,cache,data,src,logs}

    ln -sf $HOME/.local/data $HOME/.local/share
    ln -sf $HOME/.local/logs $HOME/.local/state

    mkdir -p $HOME/{downloads,projects}
}

# clone the configurations
function cloneconfigs() {
    read -p "Ensure that the GitHub repository for TVSOS is public. [ENTER]"

    # cloning from HTTPS since SSH has not yet been configured during initial setup
    git clone https://github.com/sujaltv/tvsos.git $HOME/temp
    mv $HOME/temp/* $HOME
    mv $HOME/temp/.* $HOME
    mv $HOME/.git $HOME/.tvsos
    rm -r $HOME/temp

    # modify HTTPS origin to SSH
    git --git-dir $HOME/.tvsos remote set-url origin git@github.com:sujaltv/tvsos.git

    # set some basic configs
    git --git-dir $HOME/.tvsos config --local status.showuntrackedfiles no
    git --git-dir $HOME/.tvsos config --local pull.rebase off
    git --git-dir $HOME/.tvsos config --local pull.default current
    git --git-dir $HOME/.tvsos config --local push.default current
}

function setupshell() {
    source $HOME/.config/shell/variables.sh;

    # shell configuration links
    ln -sf $XDG_CONFIG_HOME/alacritty/none.toml $XDG_CONFIG_HOME/alacritty/theme.toml
    ln -sf $XDG_CONFIG_HOME/bash/.bashrc $HOME/
    ln -sf $XDG_CONFIG_HOME/bash/.bash_profile $HOME/
    ln -sf $XDG_CONFIG_HOME/zsh/.zprofile $HOME/
    ln -sf $XDG_CONFIG_HOME/ssh $HOME/.ssh

    $XDG_CONFIG_HOME/scripts/setpermissions
}

# a function that installs apps depending on the OS distribution
function instalappswithpm() {
    function instal_commence() {
        echo "Installing $1 packages..."
        echo -e "This may take several tens of minutes; please be patient..."
    }

    function instal_arch() {
        read -p "GUI support needed (instals DWM) [y/n]? " GUI_SUPPORT

        function cli() {
            $XDG_CONFIG_HOME/scripts/instalfromcsv $XDG_CONFIG_HOME/packages/minimal/arch.csv
        }

        function gui() {
            $XDG_CONFIG_HOME/scripts/instalfromcsv $XDG_CONFIG_HOME/packages/arch/user.csv -s;

            # link files and directories
            $XDG_CONFIG_HOME/scripts/applysettings alllinks;

            # apply patches and settings to apps and install them
            $XDG_CONFIG_HOME/scripts/applysettings patch 1;
        }

        if [[ "$GUI_SUPPORT" == "y" ]]; then
            gui > /dev/null 2>&1
        else
            cli > /dev/null 2>&1
        fi
    }

    function instal_alpine() {
        $XDG_CONFIG_HOME/scripts/instalfromcsv $XDG_CONFIG_HOME/packages/minimal/alpine.csv
    }

    function instal_ubuntu() {
        $XDG_CONFIG_HOME/scripts/instalfromcsv $XDG_CONFIG_HOME/packages/minimal/ubuntu.csv
    }

    case $1 in
        "arch")
            instal_commence $DISTRO;
            instal_arch;;
        "ubuntu")
            instal_commence $DISTRO;
            instal_ubuntu > /dev/null 2>&1;;
        "alpine")
            instal_commence $DISTRO;
            instal_alpine > /dev/null 2>&1;;
        *)
            echo "Unknown distribution";;
    esac

    # instal fonts
    [ command -v fc-cache &> /dev/null ] && fc-cache -fr > /dev/null;
}

function instalwithconda() {
    read -p "Enter the latest conda download script URL: " CONDASCRIPTURL
    read -p "Make sure that the installation path is: $HOME/.local/src/anaconda3 [ENTER] "

    curl $CONDASCRIPTURL > temp.sh
    sh temp.sh
    rm temp.sh

    $XDG_CONFIG_HOME/scripts/instalfromcsv $XDG_CONFIG_HOME/packages/conda/conda.csv
    $XDG_CONFIG_HOME/scripts/linkbinsfromconda
}

function instalapps() {
    read -p "Install with the system's package manager (p) or conda (c)? " PM

    case $PM in
        "p")
            instalappswithpm $1;;
        "c")
            instalwithconda;;
    esac
}

echo -e "[1 of 5]: Pre-requisites: installing basic packages..."
echo -e "This may take several minutes; please be patient..."
preinstal $DISTRO > /dev/null 2>&1;

echo -e "[1 of 5]: Creating directories..."
mkuserdirs > /dev/null 2>&1;

read -p "[2 of 5]: Clone configs [y/n]? " CLONE_CONFIGS
[[ "$CLONE_CONFIGS" == "y" ]] && cloneconfigs;

echo -e "[3 of 5]: Applying user configurations..."
setupshell > /dev/null 2>&1;

echo -e "[4 of 5]: Installing user apps and fonts..."
instalapps $DISTRO;

echo "User setup finished."

[ command -v chsh &> /dev/null ] && chsh -s $(which zsh) $USER
exec $(which zsh)

