#!/usr/bin/env bash

# -----------------------------------------------------------------------------
#                               INITIAL TEST
# -----------------------------------------------------------------------------

if [[ $(cat /proc/$$/comm) != "bash" ]]; then
    echo "This is not a bash shell; this script runs exclusively in bash"
    return;
fi

# # -----------------------------------------------------------------------------
# #                                  SETUP
# # -----------------------------------------------------------------------------

# installing basic necessities
function preinstall() {
    pacman -Syyu --noconfirm;
    pacman -S git fontconfig --noconfirm;
}

# create the directory structure
function mkuserdirs() {
    mkdir -p $HOME/.local/{bin,cache,data,src,logs}

    ln -sf $HOME/.local/data $HOME/.local/share
    ln -sf $HOME/.local/logs $HOME/.local/state

    mkdir -p $HOME/{downloads,projects}
}

# clone the configurations
function cloneconfigs() {
    read -p "Ensure that the GitHub repository for RMOS is public. [ENTER]" 
    
    # cloning from HTTPS since SSH has not yet been configured
    git clone https://github.com/ramyamounir/rmos.git $HOME/temp
    mv $HOME/temp/* $HOME
    mv $HOME/temp/.* $HOME
    mv $HOME/.git $HOME/.rmos
    rm -rf $HOME/temp

    # modify HTTPS origin to SSH
    git --git-dir $HOME/.rmos remote set-url origin git@github.com:ramyamounir/rmos.git

    # set some basic configs
    git --git-dir $HOME/.rmos config --local status.showuntrackedfiles yes
    git --git-dir $HOME/.rmos config --local pull.rebase off
    git --git-dir $HOME/.rmos config --local pull.default current
    git --git-dir $HOME/.rmos config --local push.default current    
}

function setupshell() {
    source $HOME/.config/shell/variables.sh;

    # shell configuration links
    ln -sf $XDG_CONFIG_HOME/bash/.bashrc $HOME/
    ln -sf $XDG_CONFIG_HOME/bash/.bash_profile $HOME/
    ln -sf $XDG_CONFIG_HOME/zsh/.zprofile $HOME/
    ln -sf $XDG_CONFIG_HOME/ssh $HOME/.ssh

    $XDG_CONFIG_HOME/scripts/setpermissions
}

# a function that installs apps depending on the OS distribution
function installappswithpm() {

    echo "Installing Arch packages..."
    echo -e "This may take several tens of minutes; please be patient..."

    # Install nvidia packages
    read -p "NVIDIA drivers needed [y/n]? " NVIDIA_DRIVERS
    if [[ "$NVIDIA_DRIVERS" == "y" ]]; then
        $XDG_CONFIG_HOME/scripts/installfromcsv $XDG_CONFIG_HOME/packages/arch/nvidia.csv -s;
    fi

    $XDG_CONFIG_HOME/scripts/installfromcsv $XDG_CONFIG_HOME/packages/arch/pacman.csv -s;
    $XDG_CONFIG_HOME/scripts/applylinks;

    # Install yay packages
    read -p "Yay needed (will take a lot of time!) [y/n]? " YAY_PACKAGES
    if [[ "$YAY_PACKAGES" == "y" ]]; then
        $XDG_CONFIG_HOME/scripts/installfromcsv $XDG_CONFIG_HOME/packages/arch/yay.csv -s;
    fi


    # install fonts
    [ command -v fc-cache &> /dev/null ] && fc-cache -fr > /dev/null;
}

function installwithconda() {
    read -p "Enter the latest conda download script URL: " CONDASCRIPTURL
    read -p "Make sure that the installation path is: $HOME/.local/src/anaconda3 [ENTER] "

    curl $CONDASCRIPTURL > temp.sh
    sh temp.sh
    rm temp.sh

    $XDG_CONFIG_HOME/scripts/installfromcsv $XDG_CONFIG_HOME/packages/arch/conda.csv
    $XDG_CONFIG_HOME/scripts/linkbinsfromconda
}

function installapps() {
    read -p "Install with the system's package manager (p) or conda (c)? " PM

    case $PM in
        "p")
            installappswithpm;;
        "c")
            installwithconda;;
    esac
}

function getwallpapers() {
    git clone https://github.com/ramyamounir/wallpapers.git $HOME/.local/wallpapers
}

echo -e "[1 of 5]: Pre-requisites: installing basic packages..."
echo -e "This may take several minutes; please be patient..."
preinstall > /dev/null 2>&1;

echo -e "[1 of 5]: Creating directories..."
mkuserdirs > /dev/null 2>&1;

read -p "[2 of 5]: Clone configs [y/n]? " CLONE_CONFIGS
[[ "$CLONE_CONFIGS" == "y" ]] && cloneconfigs;

echo -e "[3 of 5]: Applying user configurations..."
setupshell > /dev/null 2>&1;

echo -e "[4 of 5]: Installing user apps and fonts..."
installapps;

echo -e "[5 of 5]: Getting wallpapers..."
getwallpapers;

echo "User setup finished."

[ command -v chsh &> /dev/null ] && chsh -s $(which zsh) $USER
exec $(which zsh)

